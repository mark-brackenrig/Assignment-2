runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
library(boot)
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
install.packages("shinythemes")
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
runApp('planner-optimisation-tool')
700*1.2
install.packages("austres")
install.packages("astsa")
Q <- factor(cycle(austres)) # split into quarter factors
trend <- time(austres) - 1980 # center the time to make the results look better using 1980 as midway in the whole dataset
reg <- lm(log(austres) ~ 0 + trend + Q, na.action=NULL) # run the regression without intercept
summary(reg)
table(trend)
plot(trend)
plot(log(austres))
plot(Q)
plot(time(austres))
time(austres)
austres
plotaustres
plot(austres)
library(conjoint)
library(AlgDesign)
library(compiler)
??compiler
f <- function() {
a = 5
b = 6
a+b
}
f
f()
compile(f)
e <- compile(f)
e
fc(2)
f <- function(x) x+1
fc <- cmpfun(f)
fc(2)
View(fc)
oldJIT <- enableJIT(0)
# a simple example
f <- function(x) x+1
fc <- cmpfun(f)
fc(2)
e <- compile(f)
e()
e
?compile
eval(e)
f <- function() {
a = 5
b = 6
a+b
}
e <- compile(f)
eval(e)
e
e()
eval(e)
disassemble(e)
write(e, "e.dll")
write(e, "e")
cmpfile(e)
e
f <- eval(e)
f
f()
g <- eval(e)
g()
save(e)
save(e, file = "test")
save(e, file = "test.class")
e
mode(e)
model1<-lm(BMI~height + mass, data =filter(newStarwars,BMI<440))
newStarwars
data
data()
data(package = .packages(all.available = T))
library(tidyverse)
newStarwars
model1<-lm(BMI~height + mass, data =filter(newStarwars,BMI<440))
library(dplyr)
model1<-lm(BMI~height + mass, data =filter(newStarwars,BMI<440))
starwars %>% mutate(BMI:=mass/((height/100)^2)) -> newStarwars
ggplot(data = newStarwars, mapping = aes(x = mass, y = BMI)) + geom_point()
?filter
?select
model1<-lm(BMI~height + mass, data =filter(newStarwars,BMI<440))
model1
summary(model1)
predict(model1, data.frame(height = 60, mass = 35))
shiny::runApp('planner-consultation-tool')
titanicData <- read_csv("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv")
titanicData$id <- 1:nrow(titanicData)   # adding an id number to each row for tracking
titanic.train <- titanicData %>% dplyr::sample_frac(.75)
titanic.test  <- dplyr::anti_join(titanicData, titanic.train, by = 'id')
missmap(titanic.train, main = "Missing values vs observed")
library(Amelia)
install.packages("Amelia")
glm1 = glm(survived ~ pclass + sex, family=binomial(logit), data = titanic.train)
summary(glm1)
plot(glm1)
eq = function(x){1/(1+exp(-x))}
ggplot(data.frame(x=c(-20, 20)), aes(x=x)) + stat_function(fun=eq, geom="line") + xlab("X") + ylab("P(Y|X)")
predict(glm1,newdata = titanic.test[1,])
(prediction<-predict(glm1,newdata = data.frame(sex="male",pclass=3),type="response"))
(predicted<-predict(glm1,titanic.test,type='response'))
prediction <- ifelse(predicted > 0.5, 1, 0)
confusion  <- table(titanic.test$survived, prediction)
confusion
glm2 = glm(survived ~. , family = "binomial", data = titanic.train)
glm2 = glm(survived ~. , family = binomial(logit), data = titanic.train)
confusion
gpaData<- read_delim("http://onlinestatbook.com/2/case_studies/data/sat.txt",delim=" ")
mlm1 <- lm(univ_GPA ~ high_GPA + math_SAT + verb_SAT,data=gpaData)
summary(mlm1)
cor(gpaData)
awardData <- read_csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
glimpse(awardData)
library(magrittr)
awardData %<>% mutate(id=as.factor(id),prog=as.factor(prog))
glimpse(awardData)
table(awardData$num_awards)
ggplot(awardData)+geom_bar(aes(x=num_awards))
glm.awards<-glm(num_awards~prog+math, awardData, family=poisson)
summary(glm.awards)
glm.awards<-glm(num_awards~prog+math, awardData, family=poisson)
glm1 = glm(survived ~ pclass + sex, family=binomial(logit), data = titanic.train)
plot(glm1$fitted.values)
hist(glm1$fitted.values)
summary(glm.awards)
hist(glm.awards$residuals)
hist(log(glm.awards$residuals))
hist(glm.awards$residuals)
summary(glm.awards$residuals)
summary(glm.awards$residuals+1)
sd(glm.awards$residuals+1)
sd(glm.awards$residuals)
predict(glm.awards,newdata = data.frame(prog=factor(2),math=54),type="response")
install.packages("AER")
??pir
?pir
library(jsonlite)
library(rjson)
test <- fromJSON("https://data.gov.au/api/3/action/package_show?id=70c2b2fe-2a32-450e-98dc-453fe4a02aae")
test <- fromJSON(file = "https://data.gov.au/api/3/action/package_show?id=70c2b2fe-2a32-450e-98dc-453fe4a02aae")
test
test$result
fromJSON(test$result)
library(XML)
test2 <- xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2
??xml
library(rvest)
test2 <- xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2 <- read_xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test$result
unlist(test)
test2 <- as.data.frame(unlist(test))
View(test2)
library(rvest)
test2 <- xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2
test3 <- xml(test2)
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2$doc
test2$node
read_xlm
read_xml
?read_xml
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd", as_html = T)
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
as.data.frame(test2)
doc <- xmlTreeParse(test2, useInternalNodes = TRUE)
doc
xmlToDataFrame(doc)
test3 <- xmlToDataFrame(doc)
View(test3)
test3 <- xmlToDataFrame(test2)
library(shinyjs)
library(shinythemes)
library(shiny)
library(shinyBS)
library(shinyjs)
library(shiny)
library(shinythemes)
#### Challenger App ###
library(shiny)
library(shinyBS)
library(shinyjs)
library(shiny)
library(shinythemes)
ui <- bootstrapPage(theme = "simplex")
server <- function(input, output, session){}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel("Challenger", "Challenger title"))
server <- function(input, output, session){}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"))
server <- function(input, output, session){
session$StopApp
}
shinyApp(ui = ui, server = server)
?headerPanel
?tabsetPanel
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third"),
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third")
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(HTML("<b style = 'font-size:40px;'>This is the Header</b>"), "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third")
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/Cleaning.r")
as.factor(subset(listings, select = c("property_type", "is_business_travel_ready")))
str(listings)
head(listings)
table(listings$host_response_time)
table(listings$host_response_rate)
table(listings$host_response_time)
grep(pattern = "is", colnames(listings))
colnames(listings[,grep(pattern = "is", colnames(listings)))
colnames(listings[,grep(pattern = "is", colnames(listings))])
colnames(listings[,grep(pattern = "is_", colnames(listings))])
listings$host_is_superhost <- as.factor(listings$host_is_superhost)
listings$is_location_exact <- as.factor(listings$is_location_exact)
View(listings)
Mark <- merge(listings, `Opera House by Public Transport`, by = "id")
boxplot(Mark$is_business_travel_ready~Mark$Distance)
boxplot(Mark$Distance~Mark$is_business_travel_ready)
boxplot(log(Mark$Distance)~Mark$is_business_travel_ready)
boxplot(log(Mark$Time)~Mark$is_business_travel_ready)
cor(Mark$Time, Mark$price)
Mark <- merge(listings, subset(`Opera House by Public Transport`, is.na(`Opera House by Public Transport`$Time)==F), by = "id")
boxplot(log(Mark$Distance)~Mark$is_business_travel_ready)
boxplot(log(Mark$Time)~Mark$is_business_travel_ready)
cor(Mark$Time, Mark$price)
cor(Mark$Distance, Mark$price)
plot(Mark$Time, Mark$price)
plot(log(Mark$Time), Mark$price)
plot(log(Mark$Time), log(Mark$price))
cor(log(Mark$Time), log(Mark$price))
Mark <- subset(Mark, Mark$price!=0)
cor(log(Mark$Time), log(Mark$price))
cor(log(Mark$Time), (Mark$price))
cor((Mark$Time), (Mark$price))
plot(distance(Mark$Time), log(Mark$price))
plot(Mark$Distance), log(Mark$price))
plot(Mark$Distance, log(Mark$price))
plot(Mark$Distance, Mark$price)
plot(Mark$Time, Mark$price)
plot(Mark$Time, Mark$price/3600)
plot(Mark$Time/3600, Mark$price)
Timecheck <- subset(Mark, Mark$Time/3600<1)
cor(Mark$Time, Mark$price)
cor(Timecheck$Time, Timecheck$price)
rm(Timecheck)
View(listings)
cor(Mark$Time, Mark$Distance)
cor(Mark$Time, Mark$square_feet)
cor(Mark$Time[is.na(Mark$square_feet)==F], Mark$square_feet[is.na(Mark$square_feet)==F])
library(leaflet)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
color = ~pal(Mark$is_business_travel_ready),
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
initial_lat = -33.9
initial_lng = 151.18
initial_zoom = 10
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
color = ~pal(Mark$is_business_travel_ready),
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
library(htmltools)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
color = ~pal(Mark$is_business_travel_ready),
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
library(RColorBrewer)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
color = ~pal(Mark$is_business_travel_ready),
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
?pal
??pal
library(scales)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
color = ~pal(Mark$is_business_travel_ready),
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~price/100,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
cor(Mark$price,Mark$longitude)
cor(Mark$price,Mark$latitude)
test <- lm(Mark, price~longitude+latitude)
test <- lm( Mark$price~Mark$longitude+Mark$latitude)
summary(test)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~col_factor(domain = is_business_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~col_factor(domain = is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~col_factor(palette = "RdBl",domain = is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~col_factor(palette = c("rgb(0,0,255)","rgb(0,255,0)"),domain = is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~col_factor(palette = c("red","green"),domain = is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~colorFactor(palette = c("red","green"),domain = is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
pal <-  colorFactor(c("green","red") , Mark$is_business_travel_ready)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~pal(Mark$is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
pal <-  colorFactor(c("red","green") , Mark$is_business_travel_ready)
leaflet(Mark) %>% addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap = TRUE)
)%>%
setView(lat = initial_lat, lng = initial_lng, zoom = initial_zoom) %>%
clearMarkers() %>%
addCircleMarkers(
color = ~pal(Mark$is_business_travel_ready),
radius = ~(price^0.5)/10,
stroke = FALSE, fillOpacity = 0.5,
labelOptions= labelOptions(style = list("white-space"= "pre", "font-size"= "14px")))
