library(XML)
test2 <- xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2
??xml
library(rvest)
test2 <- xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2 <- read_xml(x = "https://data.gov.au/dataset/location-of-centrelink-offices/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test$result
unlist(test)
test2 <- as.data.frame(unlist(test))
View(test2)
library(rvest)
test2 <- xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2
test3 <- xml(test2)
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
test2$doc
test2$node
read_xlm
read_xml
?read_xml
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd", as_html = T)
test2 <- read_xml(x = "https://data.gov.au/dataset/70c2b2fe-2a32-450e-98dc-453fe4a02aae/gmd")
as.data.frame(test2)
doc <- xmlTreeParse(test2, useInternalNodes = TRUE)
doc
xmlToDataFrame(doc)
test3 <- xmlToDataFrame(doc)
View(test3)
test3 <- xmlToDataFrame(test2)
library(shinyjs)
library(shinythemes)
library(shiny)
library(shinyBS)
library(shinyjs)
library(shiny)
library(shinythemes)
#### Challenger App ###
library(shiny)
library(shinyBS)
library(shinyjs)
library(shiny)
library(shinythemes)
ui <- bootstrapPage(theme = "simplex")
server <- function(input, output, session){}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel("Challenger", "Challenger title"))
server <- function(input, output, session){}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"))
server <- function(input, output, session){
session$StopApp
}
shinyApp(ui = ui, server = server)
?headerPanel
?tabsetPanel
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third"),
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(NULL, "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third")
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
ui <- bootstrapPage(theme = "simplex",
headerPanel(HTML("<b style = 'font-size:40px;'>This is the Header</b>"), "Challenger title"),
mainPanel(tabsetPanel(
tabPanel("A", "First panel"),
tabPanel("B", "Second Panel"),
tabPanel("C", "Third")
))
)
server <- function(input, output, session){
session$onSessionEnded(stopApp)
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
library(tcltk)
?progressbar
??progressbar
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
files <- list.files()
files
for(i in 1:length(files)){
#Read file
if(grepl(pattern = ".csv",x = files[i])==T){
temp <- read_csv(files[i])
#call the file by the name of the csv
assign(substr(files[i], start = 0, stop = nchar(files[i])-4),temp)
#remove the temp file name
rm(temp)  }
}
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
### Read Google Data###
#install.packages("gmapsdistance")
#devtools::install_github("rodazuero/gmapsdistance@058009e8d77ca51d8c7dbc6b0e3b622fb7f489a2")
library(gmapsdistance)
#The gmaps function is as follows
#gmapsdistance(origin, destination, combinations, mode, key,
#shape, avoid, departure, dep_date, dep_time,
#traffic_model, arrival, arr_date, arr_time)
#Set the API key (note that i have hidden this since I have to pay for the calls)
set.api.key('SETAPIKEY')
#Register do parallel so it is faster
library(doParallel)
registerDoParallel(cores = detectCores()-1)
#get the unique listing (note they are all unique)
Timedata <- unique(subset(listings, select = c("latitude", "longitude","id")))
#Test
#gmapsdistance(origin =paste0("-33.8","+,+","151"),destination = 'Sydney+Opera+House', departure = as.numeric(as.POSIXct("2018-04-21 12:00:00")),combinations = "all",mode = "transit", shape = "wide")
####Public Transport to Opera House####
#Opera_Public_Data <- foreach(i=1:nrow(Timedata)) %dopar% {
#  library(gmapsdistance)
#Dont steal my API
#  set.api.key('YOU MUST SEt THE API KEY!!!')
#  OperaTimePublic <- gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = 'Sydney+Opera+House', departure = as.numeric(as.POSIXct("2018-04-21 12:00:00")),combinations = "all",mode = "transit", shape = "wide")
#}
#Write to DF
#Opera_Public <- as.data.frame(matrix(unlist(Opera_Public_Data), ncol = 3,byrow = TRUE))
#Opera_Public <- cbind(Opera_Public, listings$id)
#Rename for Cleaning
#colnames(Opera_Public) <- c("Time", "Distance", "Status", "id")
#Change columns to correct format
#Time in Seconds
#Opera_Public$Time <- as.numeric(as.character(Opera_Public$Time))
#Distance in Meters
#Opera_Public$Distance <- as.numeric(as.character(Opera_Public$Distance))
#write_csv(Opera_Public, "G:/Team Drives/STDS - Assignment 2 - 3MDL/Dataset/AirBnB/Opera House by Public Transport.csv")
####Define Grid####
# important places to go in sydeny are as follows:
# Opera House and Harbour Bridge
# Luna Park
# Bondi Beach
# Manly Beach
# Blue mountains (three sisters)
# Pokolbin (hunter valley)
#We will make the assumption that participants will either want to travel by car or by public transport, not by walking or cycling
#The date and time will be determined on the weekend
#Business Travel
# Convention centre
# Macquarie Park
# Bella Vista
# Paramatta
# Alexandria
# UNSW
# UTS
grid <- expand.grid(destination = c("Sydney+Opera+House", "Luna+Park+Sydney","Bondi+Beach", "Manly+Beach","Three+Sisters", "Pokolbin+NSW"), mode = c("driving", "transit"))
Timedata <- merge(grid, Timedata) #take every combination of the grid and Timedata
library(tcltk)
393960/600
393960/120
?sprintf
pb <- tkProgressBar("Gmaps Progress", "Percentage of Records received",
0, 100, 0)
for(n in 1:120){
Sys.sleep(0.1)
setTkProgressBar(pb, n/120)
}
for(n in 1:120){
Sys.sleep(0.1)
setTkProgressBar(pb, n/120*100)
}
pb <- tkProgressBar("Gmaps Progress", "Percentage of Records received",
0, 100, 0)
for(n in 1:120){
Sys.sleep(0.1)
setTkProgressBar(pb, n/120*100)
}
?tkProgressBar
pb <- tkProgressBar("Gmaps Progress", "Percentage of Records received",
0, 100, 0)
close(pb)
n=1
(n-1)*(nrow(Timedata)/120)+1
(n)*(nrow(Timedata)/120)
n=2
(n-1)*(nrow(Timedata)/120)+1
(n)*(nrow(Timedata)/120)
rm("calendar","grid","listings", "Opera House by Public Transport", "reviews")
gc()
system.time()
n = 1
system.time(Total_Data <- foreach(i=(n-1)*(nrow(Timedata)/120)+1:(n)*(nrow(Timedata)/120)) %dopar% {
library(gmapsdistance)
#Dont steal my API
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
TimeTotal <-  gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
})
TimeTotal <-  gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
system.time( foreach(i=(n-1)*(nrow(Timedata)/120)+1:(n)*(nrow(Timedata)/120)) %dopar% {
library(gmapsdistance)
#Dont steal my API
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
TimeTotal <-  gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
})
system.time( foreach(i=((n-1)*(nrow(Timedata)/120)+1):(n*(nrow(Timedata)/120))) %dopar% {
library(gmapsdistance)
#Dont steal my API
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
TimeTotal <-  gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
})
grid <- expand.grid(destination = c("Sydney+Opera+House", "Luna+Park+Sydney","Bondi+Beach", "Manly+Beach","Three+Sisters", "Pokolbin+NSW"), mode = c("driving", "transit"))
grid[grid$destination=="Sydney+Opera+House"&grid$mode=="transit"] <- NULL
grid[,grid$destination=="Sydney+Opera+House"&grid$mode=="transit"] <- NULL
grid[grid$destination=="Sydney+Opera+House"&grid$mode=="transit"]
grid[,grid$destination=="Sydney+Opera+House"&grid$mode=="transit"]
grid <- subset(grid, grid$destination!="Sydney+Opera+House"|grid$mode!="transit")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
setwd("G:/Team Drives/STDS - Assignment 2 - 3MDL/Dataset/AirBnB")
#Read all file names in the AirBnB Dataset file
files <- list.files()
library(readr)
#Run through each file and
for(i in 1:length(files)){
#Read file
if(grepl(pattern = ".csv",x = files[i])==T){
temp <- read_csv(files[i])
#call the file by the name of the csv
assign(substr(files[i], start = 0, stop = nchar(files[i])-4),temp)
#remove the temp file name
rm(temp)  }
}
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
library(gmapsdistance)
#The gmaps function is as follows
#gmapsdistance(origin, destination, combinations, mode, key,
#shape, avoid, departure, dep_date, dep_time,
#traffic_model, arrival, arr_date, arr_time)
#Register do parallel so it is faster
library(doParallel)
registerDoParallel(cores = detectCores()-1)
#get the unique listing (note they are all unique)
Timedata <- unique(subset(listings, select = c("latitude", "longitude","id")))
#Test
#gmapsdistance(origin =paste0("-33.8","+,+","151"),destination = 'Sydney+Opera+House', departure = as.numeric(as.POSIXct("2018-04-21 12:00:00")),combinations = "all",mode = "transit", shape = "wide")
####Public Transport to Opera House####
#Opera_Public_Data <- foreach(i=1:nrow(Timedata)) %dopar% {
#  library(gmapsdistance)
#Dont steal my API
#  set.api.key('YOU MUST SEt THE API KEY!!!')
#  OperaTimePublic <- gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = 'Sydney+Opera+House', departure = as.numeric(as.POSIXct("2018-04-21 12:00:00")),combinations = "all",mode = "transit", shape = "wide")
#}
#Write to DF
#Opera_Public <- as.data.frame(matrix(unlist(Opera_Public_Data), ncol = 3,byrow = TRUE))
#Opera_Public <- cbind(Opera_Public, listings$id)
#Rename for Cleaning
#colnames(Opera_Public) <- c("Time", "Distance", "Status", "id")
#Change columns to correct format
#Time in Seconds
#Opera_Public$Time <- as.numeric(as.character(Opera_Public$Time))
#Distance in Meters
#Opera_Public$Distance <- as.numeric(as.character(Opera_Public$Distance))
#write_csv(Opera_Public, "G:/Team Drives/STDS - Assignment 2 - 3MDL/Dataset/AirBnB/Opera House by Public Transport.csv")
####Define Grid####
# important places to go in sydeny are as follows:
# Opera House and Harbour Bridge
# Luna Park
# Bondi Beach
# Manly Beach
# Blue mountains (three sisters)
# Pokolbin (hunter valley)
#We will make the assumption that participants will either want to travel by car or by public transport, not by walking or cycling
#The date and time will be determined on the weekend
#Business Travel
# Convention centre
# Macquarie Park
# Bella Vista
# Paramatta
# Alexandria
# UNSW
# UTS
grid <- expand.grid(destination = c("Sydney+Opera+House", "Luna+Park+Sydney","Bondi+Beach", "Manly+Beach","Three+Sisters", "Pokolbin+NSW"), mode = c("driving", "transit"))
grid <- subset(grid, grid$destination!="Sydney+Opera+House"|grid$mode!="transit")
Timedata <- merge(grid, Timedata) #take every combination of the grid and Timedata
361130/4
361130/(4*60)
361130/(4*60*60)
grid <- expand.grid(destination = c("Sydney+Opera+House","Bondi+Beach", "Manly+Beach","Three+Sisters", "Pokolbin+NSW"), mode = c("driving", "transit"))
grid <- subset(grid, grid$destination!="Sydney+Opera+House"|grid$mode!="transit")
Timedata1 <- unique(subset(listings, select = c("latitude", "longitude","id")))
Timedata <- merge(grid, Timedata1) #take every combination of the grid and Timedata
grid <- expand.grid(destination = c("Sydney+Opera+House","Bondi+Beach", "Manly+Beach","Three+Sisters", "Pokolbin+NSW"), mode = c( "transit"))
grid <- subset(grid, grid$destination!="Sydney+Opera+House"|grid$mode!="transit")
Timedata <- merge(grid, Timedata1) #take every combination of the grid and Timedata
131320/4
131320/(4*60*60)
131320/120
131320/100
131320/140
system.time(gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
)
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
system.time(gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
)
system.time(for(i in 1:10){gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")}
)
system.time(foreach(i=1:30) %dopar% {
library(gmapsdistance)
#Dont steal my API
set.api.key('AIzaSyCuLT1mFH6bhajliIgj1BZ4Srbf26qKseM')
TimeTotal <-  gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")
})
system.time(for(i in 1:30){gmapsdistance(origin =paste0(Timedata$latitude[i],"+",Timedata$longitude[i]),destination = Timedata$destination[i], departure = as.numeric(as.POSIXct("2018-05-21 12:00:00")),combinations = "all",mode = Timedata$mode[i], shape = "wide")}
)
install.packages("DataExplorer")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
Test <- merge(listings, `Opera House by Public Transport`, by = "id")
mode(listings$price)
head(gsub(pattern = "$", replacement = "", listings$price)
)
head(gsub(pattern = "'$'", replacement = "", listings$price)
)
head(gsub(pattern = "\$", replacement = "", listings$price)
)
head(gsub(pattern = "\\$", replacement = "", listings$price)
)
listings$price <- as.numeri(gsub(pattern = "\\$", replacement = "", listings$price))
listings$price <- as.numeric(gsub(pattern = "\\$", replacement = "", listings$price))
table(listings$price)
table(is.na(listings$price))
setwd("G:/Team Drives/STDS - Assignment 2 - 3MDL/Dataset/AirBnB")
listings <- read_csv("listings.csv")
View(listings)
subset(listings$price, grepl(pattern = "//$", listings$price))
subset(listings$price, grepl(pattern = "//$", listings$price)==T)
subset(listings, grepl(pattern = "//$", listings$price)==T)
subset(listings, grepl(pattern = "//$", listings$price)==F, select = c("price"))
subset(listings, grepl(pattern = "//$", listings$price)==T, select = c("price"))
subset(listings, grepl(pattern = "$", listings$price)==T, select = c("price"))
subset(listings, grepl(pattern = "//$", listings$price)==T, select = c("price"))
subset(listings, grepl(pattern = "/$", listings$price)==T, select = c("price"))
subset(listings, grepl(pattern = "//$", listings$price)==T, select = c("price"))
subset(listings, grepl(pattern = "\\$", listings$price)==T, select = c("price"))
listings$pricenum <- as.numeric(gsub(pattern = "//$", replacement = "", listings$price))
View(listings)
Test <- subset(listings, is.nalistings$pricenum)
Test <- subset(listings, is.na(listings$pricenum))
Test <- subset(listings, is.na(listings$pricenum)==T)
View(Test)
head(listings$pricenum)
listings$pricenum <- as.numeric(gsub(pattern = "\\$", replacement = "", listings$price))
head(listings$pricenum)
listings$pricenum <- as.numeric(gsub(pattern = "\\$", replacement = "", listings$price))
Test <- subset(listings, is.na(listings$pricenum)==T)
View(Test)
listings$pricenum <- gsub(pattern = "\\$", replacement = "", listings$price)
listings$price <- gsub(pattern = "\\,", replacement = "", listings$price)
table(is.na(as.numeric(listings$price)))
table(listings$price))
table(listings$price)
listings$price <- gsub(pattern = "\\$", replacement = "", listings$price)
listings$price <- gsub(pattern = "\\,", replacement = "", listings$price)
table(listings$price)
listings$price <- as.numeric(listings$price)
colnames(listings)
listings$pricenum <- NULL
unique(listings$experiences_offered)
listings$experiences_offered <- NULL
View(listings)
table(listings$house_rules)
head(listings$house_rules)
subset(colnames(listings),grepl("url",tolower(colnames(listings))))
stopImplicitCluster()
subset(colnames(listings),grepl("url",tolower(colnames(listings))))
listings <- subset(listings, !colnames(listings) %in% subset(colnames(listings),grepl("url",tolower(colnames(listings)))))
!colnames(listings) %in% subset(colnames(listings),grepl("url",tolower(colnames(listings))))
listings <- subset(listings, select = c( subset(colnames(listings),grepl("url",tolower(colnames(listings)))==F))
)
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/Cleaning.r")
View(listings)
str(listings)
table(listings$bed_type)
boxplot(as.factor(listings$is_business_travel_ready)~listings$price )
boxplot(listings$price~as.factor(listings$is_business_travel_ready) )
aggregate(listings$price by = list(as.factor(listings$is_business_travel_ready), summary )
aggregate(listings$price, by = list(as.factor(listings$is_business_travel_ready), summary )
aggregate(listings$price, by = list(as.factor(listings$is_business_travel_ready)), summary )
aggregate(log(listings$price), by = list(as.factor(listings$is_business_travel_ready)), summary )
View(listings)
priceclean <- function(x){
x <- gsub(pattern = "\\$", replacement = "", x)
x <- gsub(pattern = "\\,", replacement = "", x)
x <- as.numeric(x)
}
priceclean(listings$security_deposit)
head(listings$security_deposit)
listings$security_deposit <- priceclean(listings$security_deposit)
head(listings$security_deposit)
subset(colnames(listings),grepl("price",tolower(colnames(listings)))==F)
subset(colnames(listings),grepl("price",tolower(colnames(listings)))==T)
listings$weekly_price <- priceclean(listings$weekly_price)
listings$monthly_price <- priceclean(listings$monthly_price)
listings$cleaning_fee <- priceclean(listings$cleaning_fee)
listings$extra_people <- priceclean(listings$extra_people)
View(listings)
View(listings)
listings$host_response_rate <- gsub(pattern = "\\%", replacement = "", listings$host_response_rate)
listings$host_response_rate <- as.numeric(listings$host_response_rate)
table(is.na(listings$host_response_rate))
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
## Price Fields
# First
listings$price <- gsub(pattern = "\\$", replacement = "", listings$price)
listings$price <- gsub(pattern = "\\,", replacement = "", listings$price)
listings$price <- as.numeric(listings$price)
#clean Price fields
priceclean <- function(x){
x <- gsub(pattern = "\\$", replacement = "", x)
x <- gsub(pattern = "\\,", replacement = "", x)
x <- as.numeric(x)
}
#Check price fields
subset(colnames(listings),grepl("price",tolower(colnames(listings)))==T)
#other price fields clean
listings$weekly_price <- priceclean(listings$weekly_price)
listings$monthly_price <- priceclean(listings$monthly_price)
#Other price fields
listings$security_deposit <- priceclean(listings$security_deposit)
listings$cleaning_fee <- priceclean(listings$cleaning_fee)
listings$extra_people <- priceclean(listings$extra_people)
## Experience
unique(listings$experiences_offered)
#No information in this field, lets remove it
listings$experiences_offered <- NULL
## Remove URLs
listings <- subset(listings, select = c( subset(colnames(listings),grepl("url",tolower(colnames(listings)))==F)))
head(gsub(pattern = "\\%", replacement = "", listings$host_response_rate))
table(listings$host_response_rate=="N/A")
listings$host_response_rate <- as.numeric(listings$host_response_rate)
View(listings)
View(listings)
View(listings)
unique(listings$is_business_travel_ready)==c('t' 'f')
unique(listings$is_business_travel_ready)==c('t' ,'f')
unique(listings$is_business_travel_ready)==c( 'f','t')
if(unique(listings$is_business_travel_ready)==c( 'f','t')){"hi"}
if(unique(listings$is_business_travel_ready)[1]==c( 'f')){"hi"}
unique(listings$has_availability)==c( 'f','t')
unique(listings$instant_bookable)==c( 'f','t')
truefalse <- function(x){
if(unique(x)[1]=="f"&unique(x)[2]=="t"|unique(x)[1]=="t"&unique(x)[2]=="f"){
as.factor(x)
}
}
listings[1,]
listings[,1]
for(i in 1:ncol(listings)){
listings[,i]  <- truefalse(listings[,i])
}
truefalse <- function(x){
if(unique(x)[1]=="f"&unique(x)[2]=="t"|unique(x)[1]=="t"&unique(x)[2]=="f"){
as.factor(x)
}
}
for(i in 1:ncol(listings)){
listings[,i]  <- truefalse(listings[,i])
}
?lapply
truefalse <- function(x){
if(length(unique(x)<15){
as.factor(x)
}
}
truefalse <- function(x){
if(length(unique(x))<15){
as.factor(x)
}
}
length(unique(listings$name))
View(listings)
View(listings)
table(listings$host_acceptance_rate)
listings$host_acceptance_rate <- NULL
View(listings)
summary(listings)
table(listings$host_response_rate)
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/ReadAirbnb.r")
setwd("C:/Users/mbrackenrig/Documents/Assignment-2")
source("Preprocessing/Cleaning.r")
table(listings$host_response_rate)
hist(listings$host_response_rate)
